//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInputMap/IA_PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IA_PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IA_PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IA_PlayerControls"",
    ""maps"": [
        {
            ""name"": ""FPSControles"",
            ""id"": ""d4484988-579d-4a75-9a44-b81721b76582"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d872633d-72fc-4be4-9d33-70498ea072f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""35b1c847-fcac-41f0-a52b-335645528040"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FPSControles
        m_FPSControles = asset.FindActionMap("FPSControles", throwIfNotFound: true);
        m_FPSControles_Jump = m_FPSControles.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FPSControles
    private readonly InputActionMap m_FPSControles;
    private List<IFPSControlesActions> m_FPSControlesActionsCallbackInterfaces = new List<IFPSControlesActions>();
    private readonly InputAction m_FPSControles_Jump;
    public struct FPSControlesActions
    {
        private @IA_PlayerControls m_Wrapper;
        public FPSControlesActions(@IA_PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_FPSControles_Jump;
        public InputActionMap Get() { return m_Wrapper.m_FPSControles; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSControlesActions set) { return set.Get(); }
        public void AddCallbacks(IFPSControlesActions instance)
        {
            if (instance == null || m_Wrapper.m_FPSControlesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FPSControlesActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IFPSControlesActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IFPSControlesActions instance)
        {
            if (m_Wrapper.m_FPSControlesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFPSControlesActions instance)
        {
            foreach (var item in m_Wrapper.m_FPSControlesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FPSControlesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FPSControlesActions @FPSControles => new FPSControlesActions(this);
    public interface IFPSControlesActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
}
